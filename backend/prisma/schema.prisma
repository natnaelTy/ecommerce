// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  SUPER_ADMIN

  @@map("userRole")
}

model User {
  id       Int    @id @default(autoincrement())
  fullName     String
  email    String @unique
  gender   String?
  profileImage String?
  birthday DateTime?
  phoneNumber String @unique
  password String
  createdAt DateTime @default(now())
  isEmailVerified Boolean @default(false)
  resetPasswordCode       String?
  resetPasswordCodeExpiresAt DateTime?
  verificationCode        String?
  verificationCodeExpiresAt DateTime?
  
  wishlists   WishList[]
  carts     Cart[]
  orders    Order[]
  notifications Notification[]
  review      Review[]
  address     Address[]

  @@map("user")
}

model Admin {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  fullName     String
  profilePhoto String?
  createdAt    DateTime  @default(now())
  role         UserRole? @default(ADMIN)
  updatedAt    DateTime  @updatedAt
  isActive     Boolean?  @default(true)
  lastLogin    DateTime?

  @@map("admin")
}

model Products {
  id          Int          @id @default(autoincrement())
  productName String
  description String
  image       String
  price       Float
  category    String?
  brand       String
  quantity    Int
  color       String?
  weight      Int?
  material    String?
  createdAt   DateTime @default(now())

  newarrival  Newarrival[]
  wishlists   WishList[]
  carts       Cart[]
  orderItems  OrderItem[]
  categories  ProductCategory[]
  review      Review[]

  @@map("products")
}

model Review {
  id        Int      @id @default(autoincrement())
  product   Products @relation(fields: [productId], references: [id])
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  @@map("review")
}

model Newarrival {
  id         Int       @id @default(autoincrement())
  productId  Int       @unique
  products   Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("newarrival")
}

model WishList {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@unique([userId, productId]) 

  @@map("wishList")
}

model Cart {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int      @default(1)

  @@unique([userId, productId]) 

  @@map("cart")
}

model Category {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  slug        String            @unique
  products    ProductCategory[]

  @@map("category")
}

model ProductCategory {
  productId  Int
  categoryId Int

  product    Products  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
  @@index([categoryId])
  @@index([productId])

  @@map("productCategory")
}

model Coupon {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  discount  Float    
  type      String   
  expiresAt DateTime?
  active    Boolean  @default(true)

  @@map("coupon")
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  total     Float
  status    String      @default("PENDING")
  payment   Payment?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  addressId  Int?    
  address    Address? @relation(fields: [addressId], references: [id])

  @@map("order")
}

model Address {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userId], references: [id])
  userId    Int
  street    String
  city      String
  country   String
  postalCode String?
  phone     String?
  orders    Order[]

  @@map("address")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("orderItem")
}

model Payment {
  id        Int      @id @default(autoincrement())
  orderId   Int      @unique
  order     Order    @relation(fields: [orderId], references: [id])
  method    String
  status    String   @default("PENDING")
  amount    Float
  createdAt DateTime @default(now())
  txRef     String?  @unique
  currency  String?
  email     String?

  @@map("payment")
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User?     @relation(fields: [userId], references: [id])
  userId    Int?
  title       String
  message     String
  type        String   
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@map("notification")
}

model ContactMessage {
  id       Int    @id @default(autoincrement())
  fullName String
  email    String @unique
  message  String
  createdAt  DateTime @default(now())
  isRead    Boolean @default(false)

  @@map("contactMessage")
}
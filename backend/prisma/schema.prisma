// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
}

model User {
  id       Int    @id @default(autoincrement())
  fullName     String
  email    String @unique
  gender   String?
  profileImage String?
  birthday DateTime?
  phoneNumber String @unique
  password String
  createdAt DateTime @default(now())
  isEmailVerified Boolean @default(false)

  resetPasswordCode       String?  
  resetPasswordCodeExpiresAt DateTime? 
  verificationCode        String?  
  verificationCodeExpiresAt DateTime? 

  wishlists   WishList[]
  carts     Cart[]
  address   String?
  city      String?
  country   String?
  zip       String?
  orders    Order[]
  notifications Notification[]
}

model Admin {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  fullName     String
  profilePhoto String?
  createdAt    DateTime  @default(now())
  role         UserRole? @default(ADMIN)
  updatedAt    DateTime  @updatedAt
  isActive     Boolean?  @default(true)
  lastLogin    DateTime?
}

model Products {
  id          Int          @id @default(autoincrement())
  productName String
  description String
  image       String
  price       Float
  category    String?
  brand       String
  review      Int
  quantity    Int
  createdAt   DateTime @default(now())

  newarrival  Newarrival[]
  wishlists   WishList[]
  carts       Cart[]
  orderItems  OrderItem[]
  categories  ProductCategory[]
}

model Newarrival {
  id         Int       @id @default(autoincrement())
  productId  Int       @unique
  products   Products @relation(fields: [productId], references: [id])
}

model WishList {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Products @relation(fields: [productId], references: [id])
  productId Int

  @@unique([userId, productId]) // Prevent duplicate wishlist items for a user
}

model Cart {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Products @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int      @default(1)

  @@unique([userId, productId]) // Prevent duplicate cart items for a user
}

model Category {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  slug        String            @unique
  products    ProductCategory[]
}

model ProductCategory {
  productId  Int
  categoryId Int

  product    Products  @relation(fields: [productId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
  @@index([categoryId])
  @@index([productId])
}

model Coupon {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  discount  Float    
  type      String   
  expiresAt DateTime?
  active    Boolean  @default(true)
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  total     Float
  status    String      @default("PENDING") // PENDING, PAID, SHIPPED, DELIVERED, CANCELLED
  payment   Payment?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Products @relation(fields: [productId], references: [id])
}

model Payment {
  id        Int      @id @default(autoincrement())
  orderId   Int      @unique
  order     Order    @relation(fields: [orderId], references: [id])
  method    String   // "Bank transfer"
  status    String   @default("PENDING") // PENDING, PAID, FAILED
  amount    Float
  createdAt DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  title     String
  message   String
  date      DateTime @default(now())
  read      Boolean  @default(false)
}